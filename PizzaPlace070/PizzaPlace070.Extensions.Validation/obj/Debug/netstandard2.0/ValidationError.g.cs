#pragma checksum "C:\Code\Blazor\PizzaPlace070\PizzaPlace070.Extensions.Validation\ValidationError.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e6899f8be5cca2c1d4016e267a8cba34bcdb4acb"
// <auto-generated/>
#pragma warning disable 1591
namespace PizzaPlace070.Extensions.Validation
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.ComponentModel;
    public class ValidationError : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
#line 4 "C:\Code\Blazor\PizzaPlace070\PizzaPlace070.Extensions.Validation\ValidationError.cshtml"
 if (Errors.Any())
{

#line default
#line hidden
            builder.AddContent(0, "  ");
            builder.OpenElement(1, "ul");
            builder.AddAttribute(2, "class", "validation-error");
            builder.AddContent(3, "\n");
#line 7 "C:\Code\Blazor\PizzaPlace070\PizzaPlace070.Extensions.Validation\ValidationError.cshtml"
     foreach (string error in Errors)
    {

#line default
#line hidden
            builder.AddContent(4, "      ");
            builder.OpenElement(5, "li");
            builder.AddContent(6, error);
            builder.CloseElement();
            builder.AddContent(7, "\n");
#line 10 "C:\Code\Blazor\PizzaPlace070\PizzaPlace070.Extensions.Validation\ValidationError.cshtml"
    }

#line default
#line hidden
            builder.AddContent(8, "  ");
            builder.CloseElement();
            builder.AddContent(9, "\n");
#line 12 "C:\Code\Blazor\PizzaPlace070\PizzaPlace070.Extensions.Validation\ValidationError.cshtml"
}

#line default
#line hidden
        }
        #pragma warning restore 1998
#line 14 "C:\Code\Blazor\PizzaPlace070\PizzaPlace070.Extensions.Validation\ValidationError.cshtml"
            

  [Parameter]
  protected object Subject { get; set; }

  [Parameter]
  protected string Property { get; set; }

  private INotifyPropertyChanged fix; //  fixes TypeLoadException

  public IEnumerable<string> Errors
  {
    get
    {
      switch (Subject)
      {
        case null:
          yield return $"{nameof(Subject)} has not been set!";
          yield break;
        case INotifyDataErrorInfo ine:
          if (Property == null)
          {
            yield return $"{nameof(Property)} has not been set!";
            yield break;
          }
          foreach (var err in ine.GetErrors(Property))
          {
            yield return (string)err;
          }
          break;
        case IDataErrorInfo ide:
          if (Property == null)
          {
            yield return $"{nameof(Property)} has not been set!";
            yield break;
          }
          string error = ide[Property];
          if (error != null)
          {
            yield return error;
          }
          else
          {
            yield break;
          }
          break;
      }
    }
  }

#line default
#line hidden
    }
}
#pragma warning restore 1591
